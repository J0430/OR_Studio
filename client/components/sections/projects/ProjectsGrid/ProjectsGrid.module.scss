@use "@styles/partials/variables" as v;
@use "@styles/partials/mixins" as m;

.projectsOverFlow {
  overflow-y: hidden;
}
.smallProjectsContainer {
  overflow-y: auto;
  padding: 1rem;
  display: flex;
  flex-direction: row;
  height: 70;
  gap: 1rem;
  overflow-x: hidden;
  overflow-y: hidden;

  .gridItem {
    position: relative;
    overflow: hidden;
    background-color: black;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 70;
    flex-shrink: 0; /* Maintain 16:9 aspect ratio */
    img {
      align-self: start;
      width: 100%;
      height: 60vh;
      object-fit: cover;
      transition:
        opacity 0.6sease,
        transform 0.3sease;
      opacity: 1;
      aspect-ratio: 16/9;
    }
  }
}

.projectsGridContainer {
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(350px, 1fr)
  ); // Dynamic columns
  gap: m.rem(10); // Spacing between grid items
  max-height: 80vh; /* Set max height for scrolling */
  overflow-y: auto; /* Enable vertical scrolling */
  overflow-x: hidden; /* Disable horizontal scroll */
  scrollbar-width: thin; /* Firefox */
  scrollbar-color: v.$gray v.$black; /* Firefox */

  /* For WebKit browsers (Chrome, Safari) */
  &::-webkit-scrollbar {
    width: 8px;
  }

  &::-webkit-scrollbar-track {
    background: v.$black;
  }

  &::-webkit-scrollbar-thumb {
    background-color: v.$gray;
    border-radius: 4px;
  }

  @include m.respond-to("desktop") {
    grid-template-columns: repeat(3, 1fr); // 3 columns on desktop
  }

  @include m.respond-to("tablet") {
    grid-template-columns: repeat(2, 1fr); // 2 columns on tablets
  }

  @include m.respond-to("mobile") {
    grid-template-columns: repeat(auto-fill, minmax(2, 1fr));
  }
}
.gridItem {
  position: relative;
  overflow: hidden;
  background-color: black;
  display: flex;
  align-items: center;
  justify-content: center;
  aspect-ratio: 1 / 1; // Maintain square grid items

  img {
    width: 100%;
    height: 100%;
    object-fit: cover; // Ensures image covers the grid item while maintaining aspect ratio
    transition:
      opacity 0.6s ease,
      transform 0.3s ease;
    opacity: 1;

    &.loaded {
      opacity: 1;
      animation: fadeIn 0.6s ease-out;
    }

    &:hover {
      transform: scale(1.05);
      opacity: 0.9;
    }
  }

  // Varying item sizes for a masonry effect
  &:nth-child(1) {
    grid-column: span 2; // First item spans two columns
    aspect-ratio: 2 / 1; // Wider
  }

  &:nth-child(3n) {
    grid-row: span 2; // Every 3rd item spans two rows
    aspect-ratio: 1 / 2; // Taller
  }

  .imagePlaceholder {
    width: 500px;
    height: 500px;
    background-color: #58565e;
    border-radius: 8px;
    animation: pulse 1.5s infinite ease-in-out;
  }

  @keyframes pulse {
    0% {
      opacity: 0.7;
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0.7;
    }
  }
}
